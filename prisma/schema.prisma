generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String                    @id @default(cuid())
  email             String                    @unique
  name              String?
  password          String
  createdAt         DateTime                  @default(now())
  subscriptionPlan  String?
  lastLogin         DateTime?
  resumes           Resume[]
  jobApplications   JobApplication[]
  interviewSessions InterviewSession[]
  insights          JobMarketInsight[]
  liveAssistances   LiveInterviewAssistance[]
}

model Resume {
  id              String            @id @default(uuid())
  userId          String
  title           String           @default("My Resume")
  template        String           @default("modern")
  content         Json
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            User             @relation(fields: [userId], references: [id])
  jobApplications JobApplication[]

  @@index([userId])
}

model JobApplication {
  id                String   @id @default(uuid())
  userId            String
  resumeId          String
  jobTitle          String
  companyName       String
  applicationDate   DateTime @default(now())
  applicationStatus String
  jobListingLink    String?
  appliedThrough    String
  user              User     @relation(fields: [userId], references: [id])
  resume            Resume   @relation(fields: [resumeId], references: [id])

  @@index([userId])
  @@index([resumeId])
}

model InterviewSession {
  id             String                    @id @default(uuid())
  userId         String
  date           DateTime                  @default(now())
  feedback       String?
  rating         Int?
  sessionType    String
  user           User                      @relation(fields: [userId], references: [id])
  liveAssistance LiveInterviewAssistance[]

  @@index([userId])
}

model LiveInterviewAssistance {
  id              String           @id @default(uuid())
  sessionId       String
  userId          String
  question        String
  suggestedAnswer String
  responseTime    Int
  timestamp       DateTime         @default(now())
  session         InterviewSession @relation(fields: [sessionId], references: [id])
  user            User             @relation(fields: [userId], references: [id])

  @@index([sessionId])
  @@index([userId])
}

model JobMarketInsight {
  id            String   @id @default(uuid())
  userId        String
  dateGenerated DateTime @default(now())
  industry      String
  jobTrends     Json
  location      String
  keywords      String
  user          User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model SubscriptionPlan {
  id          String   @id @default(uuid())
  planName    String   @unique
  description String
  price       Decimal
  features    Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
